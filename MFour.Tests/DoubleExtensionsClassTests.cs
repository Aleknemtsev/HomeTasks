using NUnit.Framework;
using System;

namespace MFour.Tests
{
	[TestFixture]
	public class DoubleExtensionsClassTests
	{

		[Test]
		public void StringReverseTest()
		{
			string a = "abcd";
			string expected = "dcba";

			string reversed = DoubleExtensionsClass.StringReverse(a);

			Assert.That(reversed, Is.EqualTo(expected));
		}


		[TestCase(312.3125, "100111000,0101")]
		[TestCase(0, "0")]
		public void ToBinTest(double num, string expected)
		{
			string bin = DoubleExtensionsClass.ToBin(num);

			Assert.That(bin, Is.EqualTo(expected));
		}

		[TestCase(-312.3125, "1100000001110011100001010000000000000000000000000000000000000000")]
		[TestCase(0.88671875, "0011111111101100011000000000000000000000000000000000000000000000")]
		[TestCase(-255.255, "1100000001101111111010000010100011110101110000101000111101011100")]
		[TestCase(255.255, "0100000001101111111010000010100011110101110000101000111101011100")]
		[TestCase(4294967295.0, "0100000111101111111111111111111111111111111000000000000000000000")]
		[TestCase(double.MinValue, "1111111111101111111111111111111111111111111111111111111111111111")]
		[TestCase(double.MaxValue, "0111111111101111111111111111111111111111111111111111111111111111")]
		[TestCase(double.Epsilon, "0000000000000000000000000000000000000000000000000000000000000001")]
		[TestCase(double.NaN, "1111111111111000000000000000000000000000000000000000000000000000")]
		[TestCase(double.NegativeInfinity, "1111111111110000000000000000000000000000000000000000000000000000")]
		[TestCase(double.PositiveInfinity, "0111111111110000000000000000000000000000000000000000000000000000")]
		[TestCase(0.0, "0000000000000000000000000000000000000000000000000000000000000000")]
		[TestCase(-0.0, "1000000000000000000000000000000000000000000000000000000000000000")]
		public void IEEE754ExtensionTest(double num, string expected)
		{
			string numIEEE = num.IEEE754();

			Assert.That(numIEEE, Is.EqualTo(expected));
		}

	}
}